version: "3.9"

services:
  workspace:
    container_name: ${PROJECT_NAME:-default}-workspace-container
    build:
      context: ./docker/workspace
      args:
        USERNAME: ${USERNAME:-vscode}
        USER_GROUP_NAME: ${USER_GROUP_NAME:-workspace}
        USER_UID: ${USER_UID:-1000}
        USER_GID: ${USER_GID:-1000}
        TMP_PKG: ${TMP_PKG}
        TIME_ZONE: ${TIME_ZONE:-Asia/Tokyo}
        PYTHON_VERSION: ${PYTHON_VERSION:-3.10.5}
        JAVA_VERSION: ${JAVA_VERSION:-17.0.4-amzn}
        GRADLE_VERSION: ${GRADLE_VERSION:-7.5}
        NODE_VERSION: ${NODE_VERSION:-v18.7.0}
    tty: true
    environment:
      DB_USER: ${DB_USER:-dbuser}
      DB_PASSWORD: ${DB_PASSWORD:-thisIsReallyStrongPassword123}
      DB_HOST: ${DB_HOST:-postgres}
      DB_PORT: ${DB_PORT:-5432}
      DB_NAME: ${DB_NAME:-dev}
    volumes:
      - ../:/home/${USERNAME:-vscode}/workspace:cached
    working_dir: /workspace
    networks:
      - internal
      - external
    ports:
      - 5555:5555

  postgres:
    container_name: ${PROJECT_NAME:-default}-postgres-container
    image: postgres:10
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${DB_USER:-dbuser}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-thisIsReallyStrongPassword123}
      POSTGRES_DB: ${DB_NAME:-dev}
    volumes:
      - ./.docker/postgres:/var/lib/postgresql/data/
    ports:
      - ${DB_PORT:-5432}:5432
    networks:
      - internal
      - external

  pgadmin4:
    container_name: ${PROJECT_NAME:-default}-pgadmin-container
    restart: unless-stopped
    image: dpage/pgadmin4:6.12
    # https://www.pgadmin.org/docs/pgadmin4/latest/container_deployment.html#environment-variables
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL:-pgadmin@example.com}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD:-password}
    volumes:
      - ./.docker/pgamin4_data:/var/lib/pgadmin
    ports:
      - 8888:80
    networks:
      - internal
      - external
    depends_on:
      - postgres

  mongodb:
    image: mongo:6.0
    restart: unless-stopped
    container_name: ${PROJECT_NAME:-default}-mongodb-container
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${DB_USER:-dbuser}
      MONGO_INITDB_ROOT_PASSWORD: ${DB_PASSWORD:-thisIsReallyStrongPassword123}
    ports:
      - 27017:27017
    volumes:
      - ./.docker/mongodb:/data/db
    networks:
      - internal
      - external

  mongo-express:
    image: mongo-express:1.0.0-alpha.4
    container_name: ${PROJECT_NAME:-default}-mongo-express-container
    restart: always
    ports:
      - 8081:8081
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: ${DB_USER:-dbuser}
      ME_CONFIG_MONGODB_ADMINPASSWORD: ${DB_PASSWORD:-thisIsReallyStrongPassword123}
      ME_CONFIG_MONGODB_SERVER: ${DB_HOST:-mongodb}
      ME_CONFIG_MONGODB_PORT: ${DB_PORT:-27017}
      ME_CONFIG_MONGODB_ENABLE_ADMIN: ${ME_CONFIG_MONGODB_ENABLE_ADMIN:-true}
    depends_on:
      - mongodb
    networks:
      - internal
      - external

  mysql:
    container_name: ${PROJECT_NAME:-default}-mysql-container
    restart: unless-stopped
    image: mysql:8.0
    command: --default-authentication-plugin=mysql_native_password
    ports:
      - ${DB_PORT:-3306}:3306
    volumes:
      # - ./docker/mysql/init-tables.sql:/docker-entrypoint-initdb.d/init-tables.sql
      - ./.docker/mysql_data:/var/lib/mysql
    environment:
      MYSQL_ROOT_PASSWORD: ${DB_ROOT_PASSWORD:-thisIsReallyStrongPassword123}
      MYSQL_DATABASE: ${DB_NAME:-dev}
      MYSQL_USER: ${DB_USER:-dbuser}
      MYSQL_PASSWORD: ${DB_PASSWORD:-thisIsReallyStrongPassword123}
    networks:
      - internal
      - external

  rabbitMQ:
    image: rabbitmq:3.9.13-management-alpine
    container_name: ${PROJECT_NAME:-default}-rabbitMQ-container
    restart: unless-stopped
    ports:
      - 5672:5672
      - 15672:15672
    volumes:
      - ./.docker/rabbitmqdata:/var/lib/rabbitmq
      - ./.docker/rabbitmqlog:/var/log/rabbitmq
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_USERNAME:-rabbitmq}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASSWORD:-rabbitmq}
    hostname: rabbitmq
    networks:
      - internal
      - external

  nginx:
    build:
      context: ./docker/nginx
    restart: unless-stopped
    container_name: ${PROJECT_NAME:-default}-nginx-container
    ports:
      - 3333:80
    volumes:
      - ./docker/nginx/conf.d:/etc/nginx/conf.d
    networks:
      - internal
      - external

# https://www.timedia.co.jp/tech/20220628-tech/
networks:
  internal:
    driver: bridge
    internal: true
  external:
    driver: bridge
    internal: false
